{"version":3,"file":"fisea.umd.js","sources":["../src/parse.ts","../src/format.ts"],"sourcesContent":["export interface FiseaOptions {\n  separator: string;\n}\n\nconst defaultOptions = {\n  separator: ':'\n};\n\nexport function parse(\n  text: string,\n  options: FiseaOptions = defaultOptions\n): {[k: string]: string[] | undefined} {\n  const chunks = text\n    .replace(/'.*?'|\".*?\"/g, match => match.replace(/\\s/g, '_____'))\n    .split(/\\s+/)\n    .map(chunk => chunk.replace(/_____/g, ' '))\n    .map(chunk => chunk.replace(/'|\"/g, ''));\n\n  return chunks.reduce(\n    (result, chunk) => {\n      const splitted = chunk.split(options.separator);\n      if (splitted.length === 1) {\n        if (result._ === undefined) {\n          result._ = [];\n        }\n\n        result._.push(splitted[0]);\n      } else {\n        const [prop, value] = splitted;\n        let camelcaseProp = null;\n        if (result[prop] === undefined) {\n          result[prop] = [];\n          if (/-/.test(prop)) {\n            camelcaseProp = prop.replace(/-\\w/, match =>\n              match.slice(1).toUpperCase()\n            );\n            result[camelcaseProp] = [];\n          }\n        }\n\n        (result[prop] as any).push(value);\n        if (camelcaseProp !== null) {\n          (result[camelcaseProp] as any).push(value);\n        }\n      }\n\n      return result;\n    },\n    {} as {[k: string]: string[] | undefined}\n  );\n}\n","export function format(parsed: {[k: string]: string[]}): string {\n  const keys = Object.keys(parsed);\n\n  const stringResult = keys\n    .filter(key => !/[A-Z]/.test(key))\n    .reduce((result, key) => {\n      const chunk = parsed[key]\n        .map(value => {\n          if (key === '_') {\n            return value;\n          }\n\n          if (/[A-Z]/.test(key)) {\n            const chaincaseKey = key.replace(\n              /[A-Z]/g,\n              match => `-${match.toLowerCase()}`\n            );\n          }\n\n          let realValue = value;\n          if (/\\s/.test(value)) {\n            realValue = `\"${value}\"`;\n          }\n\n          return `${key}:${realValue}`;\n        })\n        .join(' ');\n\n      const nextString = `${result} ${chunk}`;\n      return nextString;\n    }, '');\n\n  return stringResult.trim();\n}\n"],"names":["defaultOptions","separator","parsed","Object","keys","filter","key","test","reduce","result","map","value","replace","match","toLowerCase","realValue","join","trim","text","options","split","chunk","splitted","length","undefined","_","push","prop","camelcaseProp","slice","toUpperCase"],"mappings":"2KAIA,IAAMA,GACJC,UAAW,uBCLUC,GAgCrB,OA/BaC,OAAOC,KAAKF,GAGtBG,OAAO,SAAAC,GAAO,OAAC,QAAQC,KAAKD,KAC5BE,OAAO,SAACC,EAAQH,GAwBf,OADsBG,MAtBRP,EAAOI,GAClBI,IAAI,SAAAC,GACH,GAAY,MAARL,EACF,OAAOK,EAGL,QAAQJ,KAAKD,IACMA,EAAIM,QACvB,SACA,SAAAC,GAAS,MAAA,IAAIA,EAAMC,gBAIvB,IAAIC,EAAYJ,EAKhB,MAJI,KAAKJ,KAAKI,KACZI,EAAY,IAAIJ,OAGRL,MAAOS,IAElBC,KAAK,MAIP,IAEeC,yBDvBpBC,EACAC,GAQA,oBARAA,KAEeD,EACZN,QAAQ,eAAgB,SAAAC,GAAS,OAAAA,EAAMD,QAAQ,MAAO,WACtDQ,MAAM,OACNV,IAAI,SAAAW,GAAS,OAAAA,EAAMT,QAAQ,SAAU,OACrCF,IAAI,SAAAW,GAAS,OAAAA,EAAMT,QAAQ,OAAQ,MAExBJ,OACZ,SAACC,EAAQY,GACP,IAAMC,EAAWD,EAAMD,MAAMD,EAAQlB,WACrC,GAAwB,IAApBqB,EAASC,YACMC,IAAbf,EAAOgB,IACThB,EAAOgB,MAGThB,EAAOgB,EAAEC,KAAKJ,EAAS,QAClB,CACE,IAAAK,OAAMhB,OACTiB,EAAgB,UACCJ,IAAjBf,EAAOkB,KACTlB,EAAOkB,MACH,IAAIpB,KAAKoB,KAIXlB,EAHAmB,EAAgBD,EAAKf,QAAQ,MAAO,SAAAC,GAClC,OAAAA,EAAMgB,MAAM,GAAGC,sBAMpBrB,EAAOkB,GAAcD,KAAKf,GACL,OAAlBiB,GACDnB,EAAOmB,GAAuBF,KAAKf,GAIxC,OAAOF"}