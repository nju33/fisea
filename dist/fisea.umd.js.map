{"version":3,"file":"fisea.umd.js","sources":["../src/parse.ts","../src/format.ts"],"sourcesContent":["export interface FiseaOptions {\n  separator: string;\n}\n\nconst defaultOptions = {\n  separator: ':'\n};\n\nexport function parse(\n  text: string,\n  options: FiseaOptions = defaultOptions\n): {[k: string]: string[] | undefined} {\n  const chunks = text.split(/\\s+/);\n\n  return chunks.reduce(\n    (result, chunk) => {\n      const splitted = chunk.split(options.separator);\n      if (splitted.length === 1) {\n        if (result._ === undefined) {\n          result._ = [];\n        }\n\n        result._.push(splitted[0]);\n      } else {\n        const [prop, value] = splitted;\n        if (result[prop] === undefined) {\n          result[prop] = [];\n        }\n\n        (result[prop] as any).push(value);\n      }\n\n      return result;\n    },\n    {} as {[k: string]: string[] | undefined}\n  );\n}\n","export function format(parsed: {[k: string]: string[]}): string {\n  const keys = Object.keys(parsed);\n\n  const result = keys.reduce((result, key) => {\n    const chunk = parsed[key]\n      .map(value => {\n        if (key === '_') {\n          return value;\n        }\n\n        return `${key}:${value}`;\n      })\n      .join(' ');\n    result += ` ${chunk}`;\n    return result;\n  }, '');\n\n  return result.trim();\n}\n"],"names":["defaultOptions","separator","parsed","Object","keys","reduce","result","key","map","value","join","trim","text","options","split","chunk","splitted","length","undefined","_","push","prop"],"mappings":"2KAIA,IAAMA,GACJC,UAAW,uBCLUC,GAiBrB,OAhBaC,OAAOC,KAAKF,GAELG,OAAO,SAACC,EAAQC,GAWlC,OADAD,GAAU,IATIJ,EAAOK,GAClBC,IAAI,SAAAC,GACH,MAAY,MAARF,EACKE,EAGCF,MAAOE,IAElBC,KAAK,MAGP,IAEWC,yBDRdC,EACAC,GAIA,oBAJAA,KAEeD,EAAKE,MAAM,OAEZT,OACZ,SAACC,EAAQS,GACP,IAAMC,EAAWD,EAAMD,MAAMD,EAAQZ,WACrC,GAAwB,IAApBe,EAASC,YACMC,IAAbZ,EAAOa,IACTb,EAAOa,MAGTb,EAAOa,EAAEC,KAAKJ,EAAS,QAClB,CACE,IAAAK,OAAMZ,YACQS,IAAjBZ,EAAOe,KACTf,EAAOe,OAGRf,EAAOe,GAAcD,KAAKX,GAG7B,OAAOH"}